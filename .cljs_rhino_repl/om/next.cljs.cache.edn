;; Analyzed by ClojureScript 1.7.170
{:use-macros {defui om.next, invariant om.next}, :excludes #{var? key replace force}, :name om.next, :imports {Console goog.debug.Console}, :requires {glog goog.log, gstring goog.string, om.next.cache om.next.cache, clojure.zip clojure.zip, p om.next.protocols, om.next.impl.parser om.next.impl.parser, goog.string goog.string, gobj goog.object, goog.object goog.object, walk clojure.walk, goog.log goog.log, util om.util, om.next.protocols om.next.protocols, om.tempid om.tempid, c om.next.cache, parser om.next.impl.parser, transit om.transit, zip clojure.zip, clojure.walk clojure.walk, om.transit om.transit, tempid om.tempid, om.util om.util, Console goog.debug.Console}, :uses nil, :defs {get-props {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 359, :column 8, :end-line 359, :end-column 17, :private true, :arglists (quote ([x]))}, :private true, :name om.next/get-props, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, replace-var {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 199, :column 8, :end-line 199, :end-column 19, :private true, :arglists (quote ([expr params]))}, :private true, :name om.next/replace-var, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :method-params ([expr params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 2, :fn-var true, :arglists (quote ([expr params]))}, tag {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 266, :column 7, :end-line 266, :end-column 10, :arglists (quote ([x class]))}, :name om.next/tag, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 10, :method-params ([x class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x class]))}, db->tree {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1333, :column 7, :end-line 1333, :end-column 15, :arglists (quote ([query data refs] [query data refs map-ident])), :doc "Given a query, some data in the default database format, and the entire\n   application state in the default database format, return the tree where all\n   ident links have been replaced with their original node values.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([query data refs] [query data refs map-ident]), :arglists ([query data refs] [query data refs map-ident]), :arglists-meta (nil nil)}}, :name om.next/db->tree, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([query data refs] [query data refs map-ident]), :arglists ([query data refs] [query data refs map-ident]), :arglists-meta (nil nil)}, :method-params ([query data refs] [query data refs map-ident]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1333, :end-line 1333, :max-fixed-arity 4, :fn-var true, :arglists ([query data refs] [query data refs map-ident]), :doc "Given a query, some data in the default database format, and the entire\n   application state in the default database format, return the tree where all\n   ident links have been replaced with their original node values."}, get-local-query-data {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 216, :column 8, :end-line 216, :end-column 28, :private true, :arglists (quote ([component]))}, :private true, :name om.next/get-local-query-data, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 28, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, force-root-render! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1854, :column 7, :end-line 1854, :end-column 25, :arglists (quote ([reconciler])), :doc "Force a re-render of the root. Not recommended for anything except\n   recomputing :shared."}, :name om.next/force-root-render!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 25, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1854, :end-line 1854, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "Force a re-render of the root. Not recommended for anything except\n   recomputing :shared."}, t {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 414, :column 8, :end-line 414, :end-column 9, :private true, :arglists (quote ([c])), :doc "Get basis t value for when the component last read its props from\n   the global state."}, :private true, :name om.next/t, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 9, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 414, :end-line 414, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Get basis t value for when the component last read its props from\n   the global state."}, tempid? {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1874, :column 16, :end-line 1874, :end-column 23, :tag boolean, :arglists (quote ([x])), :doc "Return true if x is a tempid, false otherwise"}, :name om.next/tempid?, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1874, :ret-tag boolean, :end-line 1874, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Return true if x is a tempid, false otherwise"}, get-next-props {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 356, :column 8, :end-line 356, :end-column 22, :private true, :arglists (quote ([x]))}, :private true, :name om.next/get-next-props, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 356, :end-line 356, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, unwrap {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 282, :column 8, :end-line 282, :end-column 14, :private true, :arglists (quote ([om-props]))}, :private true, :name om.next/unwrap, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 14, :method-params ([om-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists (quote ([om-props]))}, query {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 184, :column 4, :end-line 184, :end-column 9, :protocol om.next/IQuery, :doc "Return the component's unbound query", :arglists (quote ([this]))}, :protocol om.next/IQuery, :name om.next/query, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 184, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the component's unbound query"}, query-template {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 78, :column 8, :end-line 78, :end-column 22, :private true, :arglists (quote ([query path])), :doc "Given a query and a path into a query return a zipper focused at the location\n   specified by the path. This location can be replaced to customize / alter\n   the query."}, :private true, :name om.next/query-template, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 22, :method-params ([query path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists (quote ([query path])), :doc "Given a query and a path into a query return a zipper focused at the location\n   specified by the path. This location can be replaced to customize / alter\n   the query."}, annotate-mutations {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 850, :column 7, :end-line 850, :end-column 25, :arglists (quote ([tx ident])), :doc "Given a query expression annotate all mutations by adding a :mutator -> ident\n   entry to the metadata of each mutation expression in the query."}, :name om.next/annotate-mutations, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 25, :method-params ([tx ident]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 850, :end-line 850, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tx ident])), :doc "Given a query expression annotate all mutations by adding a :mutator -> ident\n   entry to the metadata of each mutation expression in the query."}, move-to-key {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 68, :column 8, :end-line 68, :end-column 19, :private true, :arglists (quote ([loc k])), :doc "Move from the current zipper location to the specified key. loc must be a\n   hash map node."}, :private true, :name om.next/move-to-key, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :method-params ([loc k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc k])), :doc "Move from the current zipper location to the specified key. loc must be a\n   hash map node."}, get-prop {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 339, :column 8, :end-line 339, :end-column 16, :private true, :arglists (quote ([c k])), :doc "PRIVATE: Do not use"}, :private true, :name om.next/get-prop, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 16, :method-params ([c k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 339, :end-line 339, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c k])), :doc "PRIVATE: Do not use"}, ->OmProps {:protocol-inline nil, :meta {:private true, :protocols #{}, :file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :end-column 27, :column 20, :factory :positional, :line 272, :end-line 272, :arglists (quote ([props basis-t])), :skip-protocol-flag nil}, :private true, :protocols #{}, :name om.next/->OmProps, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 27, :method-params ([props basis-t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 272, :end-line 272, :max-fixed-arity 2, :fn-var true, :arglists (quote ([props basis-t])), :skip-protocol-flag nil}, class-path->queries {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1074, :column 7, :end-line 1074, :end-column 26, :arglists (quote ([x y])), :doc "Given x (a reconciler or indexer) and y (a component or component class\n   path), return the queries for that path."}, :name om.next/class-path->queries, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 26, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1074, :end-line 1074, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "Given x (a reconciler or indexer) and y (a component or component class\n   path), return the queries for that path."}, default-merge {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1449, :column 7, :end-line 1449, :end-column 20, :arglists (quote ([reconciler state res query]))}, :name om.next/default-merge, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 20, :method-params ([reconciler state res query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1449, :end-line 1449, :max-fixed-arity 4, :fn-var true, :arglists (quote ([reconciler state res query]))}, ITxIntercept {:meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 815, :column 14, :end-line 815, :end-column 26, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {tx-intercept [[c tx]]}}}, :protocol-symbol true, :name om.next/ITxIntercept, :file ".cljs_rhino_repl/om/next.cljs", :end-column 26, :column 1, :line 815, :protocol-info {:methods {tx-intercept [[c tx]]}}, :info nil, :end-line 815, :impls #{}, :doc nil, :jsdoc ("@interface")}, Ident {:meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 173, :column 14, :end-line 173, :end-column 19, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {ident [[this props]]}}}, :protocol-symbol true, :name om.next/Ident, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :column 1, :line 173, :protocol-info {:methods {ident [[this props]]}}, :info nil, :end-line 173, :impls #{}, :doc nil, :jsdoc ("@interface")}, rewrite {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1345, :column 7, :end-line 1345, :end-column 14, :arglists (quote ([rewrite-map result]))}, :name om.next/rewrite, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 14, :method-params ([rewrite-map result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1345, :end-line 1345, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rewrite-map result]))}, get-rendered-state {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 559, :column 7, :end-line 559, :end-column 25, :arglists (quote ([component])), :doc "Get the rendered state of component. om.next/get-state always returns the\n   up-to-date state."}, :name om.next/get-rendered-state, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 25, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 559, :end-line 559, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Get the rendered state of component. om.next/get-state always returns the\n   up-to-date state."}, react-type {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 440, :column 7, :end-line 440, :end-column 17, :arglists (quote ([x])), :doc "Returns the component type, regardless of whether the component has been\n   mounted"}, :name om.next/react-type, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 440, :end-line 440, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns the component type, regardless of whether the component has been\n   mounted"}, merge! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1456, :column 7, :end-line 1456, :end-column 13, :arglists (quote ([reconciler delta] [reconciler delta query])), :doc "Merge a state delta into the application state. Affected components managed\n   by the reconciler will re-render.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reconciler delta] [reconciler delta query]), :arglists ([reconciler delta] [reconciler delta query]), :arglists-meta (nil nil)}}, :name om.next/merge!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reconciler delta] [reconciler delta query]), :arglists ([reconciler delta] [reconciler delta query]), :arglists-meta (nil nil)}, :method-params ([reconciler delta] [reconciler delta query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1456, :end-line 1456, :max-fixed-arity 3, :fn-var true, :arglists ([reconciler delta] [reconciler delta query]), :doc "Merge a state delta into the application state. Affected components managed\n   by the reconciler will re-render."}, -next-props {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 393, :column 7, :end-line 393, :end-column 18, :arglists (quote ([next-props component]))}, :name om.next/-next-props, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 18, :method-params ([next-props component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 393, :end-line 393, :max-fixed-arity 2, :fn-var true, :arglists (quote ([next-props component]))}, gather-sends {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 587, :column 7, :end-line 587, :end-column 19, :arglists (quote ([{:keys [parser], :as env} q remotes]))}, :name om.next/gather-sends, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :method-params ([p__28309 q remotes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 587, :end-line 587, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [parser], :as env} q remotes]))}, set-query! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 623, :column 7, :end-line 623, :end-column 17, :arglists (quote ([x params&query] [x {:keys [params query]} reads])), :doc "Change the query of a component. Takes a map containing :params and/or\n   :query. :params should be a map of new bindings and :query should be a query\n   expression. Will schedule a re-render as well as remote re-sends if\n   necessary.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x params&query] [x {:keys [params query]} reads]), :arglists ([x params&query] [x {:keys [params query]} reads]), :arglists-meta (nil nil)}}, :name om.next/set-query!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x params&query] [x {:keys [params query]} reads]), :arglists ([x params&query] [x {:keys [params query]} reads]), :arglists-meta (nil nil)}, :method-params ([x params&query] [x {:keys [params query]} reads]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 623, :end-line 623, :max-fixed-arity 3, :fn-var true, :arglists ([x params&query] [x {:keys [params query]} reads]), :doc "Change the query of a component. Takes a map containing :params and/or\n   :query. :params should be a map of new bindings and :query should be a query\n   expression. Will schedule a re-render as well as remote re-sends if\n   necessary."}, ref->any {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1062, :column 7, :end-line 1062, :end-column 15, :arglists (quote ([x ref])), :doc "Get any component from the indexer that matches the ref."}, :name om.next/ref->any, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 15, :method-params ([x ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1062, :end-line 1062, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x ref])), :doc "Get any component from the indexer that matches the ref."}, get-component-query {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 230, :column 8, :end-line 230, :end-column 27, :private true, :arglists (quote ([c]))}, :private true, :name om.next/get-component-query, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 27, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, clear-prev-props! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 411, :column 8, :end-line 411, :end-column 25, :private true, :arglists (quote ([c]))}, :private true, :name om.next/clear-prev-props!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 411, :end-line 411, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, props {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 475, :column 7, :end-line 475, :end-column 12, :arglists (quote ([component])), :doc "Return a components props."}, :name om.next/props, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 12, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 475, :end-line 475, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Return a components props."}, -prev-props {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 385, :column 7, :end-line 385, :end-column 18, :arglists (quote ([prev-props component]))}, :name om.next/-prev-props, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 18, :method-params ([prev-props component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 385, :end-line 385, :max-fixed-arity 2, :fn-var true, :arglists (quote ([prev-props component]))}, expr->key {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 39, :column 8, :end-line 39, :end-column 17, :private true, :arglists (quote ([expr])), :doc "Given a query expression return its key."}, :private true, :name om.next/expr->key, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr])), :doc "Given a query expression return its key."}, get-unbound-query {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 220, :column 7, :end-line 220, :end-column 24, :arglists (quote ([component])), :doc "Return the unbound query for a component."}, :name om.next/get-unbound-query, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 24, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Return the unbound query for a component."}, update-component! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 715, :column 8, :end-line 715, :end-column 25, :private true, :arglists (quote ([c next-props]))}, :private true, :name om.next/update-component!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 25, :method-params ([c next-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 715, :end-line 715, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c next-props]))}, path {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 446, :column 8, :end-line 446, :end-column 12, :private true, :arglists (quote ([c])), :doc "Returns the component's Om data path."}, :private true, :name om.next/path, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 12, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 446, :end-line 446, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Returns the component's Om data path."}, to-class {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1115, :column 7, :end-line 1115, :end-column 15, :arglists (quote ([class]))}, :name om.next/to-class, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 15, :method-params ([class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1115, :end-line 1115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([class]))}, tx-intercept {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 816, :column 4, :end-line 816, :end-column 16, :protocol om.next/ITxIntercept, :doc "An optional protocol that component may implement to intercept child\n     transactions.", :arglists (quote ([c tx]))}, :protocol om.next/ITxIntercept, :name om.next/tx-intercept, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 16, :method-params ([c tx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 815, :end-line 816, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c tx])), :doc "An optional protocol that component may implement to intercept child\n     transactions."}, children {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 710, :column 7, :end-line 710, :end-column 15, :arglists (quote ([component])), :doc "Returns the component's children."}, :name om.next/children, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 15, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 710, :end-line 710, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Returns the component's children."}, default-merge-ident {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1633, :column 8, :end-line 1633, :end-column 27, :private true, :arglists (quote ([_ tree ref props]))}, :private true, :name om.next/default-merge-ident, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 27, :method-params ([_ tree ref props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1633, :end-line 1633, :max-fixed-arity 4, :fn-var true, :arglists (quote ([_ tree ref props]))}, app-root {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1848, :column 7, :end-line 1848, :end-column 15, :arglists (quote ([reconciler])), :doc "Return the application's root component."}, :name om.next/app-root, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 15, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1848, :end-line 1848, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "Return the application's root component."}, -set-state! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 187, :column 4, :end-line 187, :end-column 15, :protocol om.next/ILocalState, :doc "Set the component's local state", :arglists (quote ([this new-state]))}, :protocol om.next/ILocalState, :name om.next/-set-state!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 15, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 187, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Set the component's local state"}, iquery? {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 239, :column 16, :end-line 239, :end-column 23, :tag boolean, :arglists (quote ([x]))}, :name om.next/iquery?, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :ret-tag boolean, :end-line 239, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, var->keyword {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 196, :column 8, :end-line 196, :end-column 20, :private true, :arglists (quote ([x]))}, :private true, :name om.next/var->keyword, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, reduce-query-depth {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1220, :column 7, :end-line 1220, :end-column 25, :arglists (quote ([q k])), :doc "Changes a join on key k with depth limit from [:a {:k n}] to [:a {:k (dec n)}]"}, :name om.next/reduce-query-depth, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 25, :method-params ([q k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1220, :end-line 1220, :max-fixed-arity 2, :fn-var true, :arglists (quote ([q k])), :doc "Changes a join on key k with depth limit from [:a {:k n}] to [:a {:k (dec n)}]"}, update-props! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 468, :column 8, :end-line 468, :end-column 21, :private true, :arglists (quote ([c next-props]))}, :private true, :name om.next/update-props!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 21, :method-params ([c next-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 468, :end-line 468, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c next-props]))}, nil-props {:name om.next/nil-props, :file ".cljs_rhino_repl/om/next.cljs", :line 280, :column 1, :end-line 280, :end-column 25, :private true, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 280, :column 16, :end-line 280, :end-column 25, :private true}}, should-update? {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 720, :column 7, :end-line 720, :end-column 21, :arglists (quote ([c next-props] [c next-props next-state])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([c next-props] [c next-props next-state]), :arglists ([c next-props] [c next-props next-state]), :arglists-meta (nil nil)}}, :name om.next/should-update?, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([c next-props] [c next-props next-state]), :arglists ([c next-props] [c next-props next-state]), :arglists-meta (nil nil)}, :method-params ([c next-props] [c next-props next-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 720, :end-line 720, :max-fixed-arity 3, :fn-var true, :arglists ([c next-props] [c next-props next-state])}, get-ident {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 757, :column 7, :end-line 757, :end-column 16, :arglists (quote ([x]))}, :name om.next/get-ident, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 757, :end-line 757, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ast->query {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 913, :column 7, :end-line 913, :end-column 17, :arglists (quote ([query-ast]))}, :name om.next/ast->query, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([query-ast]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 913, :end-line 913, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query-ast]))}, om-props {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 274, :column 8, :end-line 274, :end-column 16, :private true, :arglists (quote ([props basis-t]))}, :private true, :name om.next/om-props, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 16, :method-params ([props basis-t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 274, :end-line 274, :max-fixed-arity 2, :fn-var true, :arglists (quote ([props basis-t]))}, instrument {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 464, :column 7, :end-line 464, :end-column 17, :arglists (quote ([component]))}, :name om.next/instrument, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 464, :end-line 464, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, om-props-basis {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 277, :column 8, :end-line 277, :end-column 22, :private true, :arglists (quote ([om-props]))}, :private true, :name om.next/om-props-basis, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 22, :method-params ([om-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 1, :fn-var true, :arglists (quote ([om-props]))}, var? {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 192, :column 8, :end-line 192, :end-column 12, :private true, :arglists (quote ([x]))}, :private true, :name om.next/var?, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, map->Reconciler {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1475, :column 12, :end-line 1475, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__28713]))}, :name om.next/map->Reconciler, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 22, :method-params ([G__28713]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 1475, :end-line 1475, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28713]))}, react-key {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 435, :column 7, :end-line 435, :end-column 16, :arglists (quote ([component])), :doc "Returns the components React key."}, :name om.next/react-key, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 16, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 435, :end-line 435, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Returns the components React key."}, set-state! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 515, :column 7, :end-line 515, :end-column 17, :arglists (quote ([component new-state])), :doc "Set the component local state of the component. Analogous to React's\n   setState."}, :name om.next/set-state!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([component new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 515, :end-line 515, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component new-state])), :doc "Set the component local state of the component. Analogous to React's\n   setState."}, default-migrate {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1643, :column 8, :end-line 1643, :end-column 23, :private true, :arglists (quote ([app-state-pure query tempids] [app-state-pure query tempids id-key])), :doc "Given app-state-pure (the application state as an immutable value), a query,\n   tempids (a hash map from tempid to stable id), and an optional id-key\n   keyword, return a new application state value with the tempids replaced by\n   the stable ids.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([app-state-pure query tempids] [app-state-pure query tempids id-key]), :arglists ([app-state-pure query tempids] [app-state-pure query tempids id-key]), :arglists-meta (nil nil)}}, :private true, :name om.next/default-migrate, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([app-state-pure query tempids] [app-state-pure query tempids id-key]), :arglists ([app-state-pure query tempids] [app-state-pure query tempids id-key]), :arglists-meta (nil nil)}, :method-params ([app-state-pure query tempids] [app-state-pure query tempids id-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1643, :end-line 1643, :max-fixed-arity 4, :fn-var true, :arglists ([app-state-pure query tempids] [app-state-pure query tempids id-key]), :doc "Given app-state-pure (the application state as an immutable value), a query,\n   tempids (a hash map from tempid to stable id), and an optional id-key\n   keyword, return a new application state value with the tempids replaced by\n   the stable ids."}, tree->db {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1198, :column 7, :end-line 1198, :end-column 15, :arglists (quote ([x data] [x data merge-idents])), :doc "Given a Om component class or instance and a tree of data, use the component's\n   query to transform the tree into the default database format. All nodes that\n   can be mapped via Ident implementations wil be replaced with ident links. The\n   original node data will be moved into tables indexed by ident. If merge-idents\n   option is true, will return these tables in the result instead of as metadata.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x data] [x data merge-idents]), :arglists ([x data] [x data merge-idents]), :arglists-meta (nil nil)}}, :name om.next/tree->db, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x data] [x data merge-idents]), :arglists ([x data] [x data merge-idents]), :arglists-meta (nil nil)}, :method-params ([x data] [x data merge-idents]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1198, :end-line 1198, :max-fixed-arity 3, :fn-var true, :arglists ([x data] [x data merge-idents]), :doc "Given a Om component class or instance and a tree of data, use the component's\n   query to transform the tree into the default database format. All nodes that\n   can be mapped via Ident implementations wil be replaced with ident links. The\n   original node data will be moved into tables indexed by ident. If merge-idents\n   option is true, will return these tables in the result instead of as metadata."}, from-history {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1861, :column 7, :end-line 1861, :end-column 19, :arglists (quote ([reconciler uuid])), :doc "Given a reconciler and UUID return the application state snapshost\n   from history associated with the UUID. The size of the reconciler history\n   may be configured by the :history option when constructing the reconciler."}, :name om.next/from-history, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :method-params ([reconciler uuid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1861, :end-line 1861, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reconciler uuid])), :doc "Given a reconciler and UUID return the application state snapshost\n   from history associated with the UUID. The size of the reconciler history\n   may be configured by the :history option when constructing the reconciler."}, default-ui->props {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1615, :column 8, :end-line 1615, :end-column 25, :private true, :arglists (quote ([{:keys [parser pathopt], :as env} c]))}, :private true, :name om.next/default-ui->props, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 25, :method-params ([p__28752 c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1615, :end-line 1615, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [parser pathopt], :as env} c]))}, to-env {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 820, :column 8, :end-line 820, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name om.next/to-env, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 820, :end-line 820, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, process-roots {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1399, :column 7, :end-line 1399, :end-column 20, :arglists (quote ([query]))}, :name om.next/process-roots, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 20, :method-params ([query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1399, :end-line 1399, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query]))}, parent {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 423, :column 8, :end-line 423, :end-column 14, :private true, :arglists (quote ([component])), :doc "Returns the parent Om component."}, :private true, :name om.next/parent, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 14, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 423, :end-line 423, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Returns the parent Om component."}, prev-props* {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 378, :column 8, :end-line 378, :end-column 19, :private true, :arglists (quote ([x y] [x y z])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}}, :private true, :name om.next/prev-props*, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}, :method-params ([x y] [x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 378, :end-line 378, :max-fixed-arity 3, :fn-var true, :arglists ([x y] [x y z])}, replace {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 108, :column 8, :end-line 108, :end-column 15, :private true, :arglists (quote ([template new-query]))}, :private true, :name om.next/replace, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 15, :method-params ([template new-query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 2, :fn-var true, :arglists (quote ([template new-query]))}, computed {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 488, :column 7, :end-line 488, :end-column 15, :arglists (quote ([props computed-map])), :doc "Add computed properties to props. Note will replace any pre-existing\n   computed properties."}, :name om.next/computed, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 15, :method-params ([props computed-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 488, :end-line 488, :max-fixed-arity 2, :fn-var true, :arglists (quote ([props computed-map])), :doc "Add computed properties to props. Note will replace any pre-existing\n   computed properties."}, force {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1891, :column 7, :end-line 1891, :end-column 12, :arglists (quote ([expr] [expr target])), :doc "Given a query expression return an equivalent query expression that can be\n   spliced into a transaction that will force a read of that key from the\n   specified remote target.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([expr] [expr target]), :arglists ([expr] [expr target]), :arglists-meta (nil nil)}}, :name om.next/force, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([expr] [expr target]), :arglists ([expr] [expr target]), :arglists-meta (nil nil)}, :method-params ([expr] [expr target]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1891, :end-line 1891, :max-fixed-arity 2, :fn-var true, :arglists ([expr] [expr target]), :doc "Given a query expression return an equivalent query expression that can be\n   spliced into a transaction that will force a read of that key from the\n   specified remote target."}, ->Indexer {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 920, :column 12, :end-line 920, :end-column 19, :internal-ctor true, :factory :positional, :arglists (quote ([indexes extfs]))}, :name om.next/->Indexer, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :method-params ([indexes extfs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 920, :end-line 920, :max-fixed-arity 2, :fn-var true, :arglists (quote ([indexes extfs]))}, focused-join {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 113, :column 8, :end-line 113, :end-column 20, :private true, :arglists (quote ([expr ks]))}, :private true, :name om.next/focused-join, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 20, :method-params ([expr ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([expr ks]))}, get-prev-props {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 353, :column 8, :end-line 353, :end-column 22, :private true, :arglists (quote ([x]))}, :private true, :name om.next/get-prev-props, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 353, :end-line 353, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, normalize* {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1121, :column 8, :end-line 1121, :end-column 18, :private true, :arglists (quote ([query data refs union-seen]))}, :private true, :name om.next/normalize*, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 18, :method-params ([query data refs union-seen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1121, :end-line 1121, :max-fixed-arity 4, :fn-var true, :arglists (quote ([query data refs union-seen]))}, props* {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 372, :column 8, :end-line 372, :end-column 14, :private true, :arglists (quote ([x y] [x y z])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}}, :private true, :name om.next/props*, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}, :method-params ([x y] [x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 372, :end-line 372, :max-fixed-arity 3, :fn-var true, :arglists ([x y] [x y z])}, class->any {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1068, :column 7, :end-line 1068, :end-column 17, :arglists (quote ([x class])), :doc "Get any component from the indexer that matches the component class."}, :name om.next/class->any, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([x class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1068, :end-line 1068, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x class])), :doc "Get any component from the indexer that matches the component class."}, mounted? {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 700, :column 16, :end-line 700, :end-column 24, :tag boolean, :arglists (quote ([x])), :doc "Returns true if the component is mounted."}, :name om.next/mounted?, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 700, :ret-tag boolean, :end-line 700, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if the component is mounted."}, move-roots {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1353, :column 8, :end-line 1353, :end-column 18, :private true, :arglists (quote ([join result-roots path])), :doc "When given a join `{:join selector-vector}`, roots found so far, and a `path` prefix:\n  returns a (possibly empty) sequence of [re-rooted-join prefix] results.\n  Does NOT support sub-roots. Each re-rooted join will share only\n  one common parent (their common branching point).\n  "}, :private true, :name om.next/move-roots, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 18, :method-params ([join result-roots path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1353, :end-line 1353, :max-fixed-arity 3, :fn-var true, :arglists (quote ([join result-roots path])), :doc "When given a join `{:join selector-vector}`, roots found so far, and a `path` prefix:\n  returns a (possibly empty) sequence of [re-rooted-join prefix] results.\n  Does NOT support sub-roots. Each re-rooted join will share only\n  one common parent (their common branching point).\n  "}, focus-query {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 122, :column 7, :end-line 122, :end-column 18, :arglists (quote ([query path])), :doc "Given a query, focus it along the specified path.\n\n  Examples:\n    (om.next/focus-query [:foo :bar :baz] [:foo])\n    => [:foo]\n\n    (om.next/focus-query [{:foo [:bar :baz]} :woz] [:foo :bar])\n    => [{:foo [:bar]}]"}, :name om.next/focus-query, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 18, :method-params ([query path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([query path])), :doc "Given a query, focus it along the specified path.\n\n  Examples:\n    (om.next/focus-query [:foo :bar :baz] [:foo])\n    => [:foo]\n\n    (om.next/focus-query [{:foo [:bar :baz]} :woz] [:foo :bar])\n    => [{:foo [:bar]}]"}, -merge-pending-state! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 190, :column 4, :end-line 190, :end-column 25, :protocol om.next/ILocalState, :doc "Get the component's pending local state", :arglists (quote ([this]))}, :protocol om.next/ILocalState, :name om.next/-merge-pending-state!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 190, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Get the component's pending local state"}, default-merge-tree {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1637, :column 8, :end-line 1637, :end-column 26, :private true, :arglists (quote ([a b]))}, :private true, :name om.next/default-merge-tree, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 26, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1637, :end-line 1637, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, *reconciler* {:name om.next/*reconciler*, :file ".cljs_rhino_repl/om/next.cljs", :line 27, :column 1, :end-line 27, :end-column 49, :dynamic true, :private true, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 27, :column 37, :end-line 27, :end-column 49, :dynamic true, :private true}}, denormalize* {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1240, :column 8, :end-line 1240, :end-column 20, :private true, :arglists (quote ([query data refs map-ident idents-seen union-expr recurse-key])), :doc "Denormalize a data based on query. refs is a data structure which maps idents\n   to their values. map-ident is a function taking a ident to another ident,\n   used during tempid transition. idents-seen is the set of idents encountered,\n   used to limit recursion. union-expr is the current union expression being\n   evaluated. recurse-key is key representing the current recursive query being\n   evaluted."}, :private true, :name om.next/denormalize*, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 20, :method-params ([query data refs map-ident idents-seen union-expr recurse-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1240, :end-line 1240, :max-fixed-arity 7, :fn-var true, :arglists (quote ([query data refs map-ident idents-seen union-expr recurse-key])), :doc "Denormalize a data based on query. refs is a data structure which maps idents\n   to their values. map-ident is a function taking a ident to another ident,\n   used during tempid transition. idents-seen is the set of idents encountered,\n   used to limit recursion. union-expr is the current union expression being\n   evaluated. recurse-key is key representing the current recursive query being\n   evaluted."}, merge-novelty! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1436, :column 8, :end-line 1436, :end-column 22, :private true, :arglists (quote ([reconciler state res query]))}, :private true, :name om.next/merge-novelty!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 22, :method-params ([reconciler state res query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1436, :end-line 1436, :max-fixed-arity 4, :fn-var true, :arglists (quote ([reconciler state res query]))}, IQuery {:meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 183, :column 14, :end-line 183, :end-column 20, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {query [[this]]}}}, :protocol-symbol true, :name om.next/IQuery, :file ".cljs_rhino_repl/om/next.cljs", :end-column 20, :column 1, :line 183, :protocol-info {:methods {query [[this]]}}, :info nil, :end-line 183, :impls #{}, :doc nil, :jsdoc ("@interface")}, get-computed {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 499, :column 7, :end-line 499, :end-column 19, :arglists (quote ([x] [x k-or-ks])), :doc "Return the computed properties on a component or its props.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x k-or-ks]), :arglists ([x] [x k-or-ks]), :arglists-meta (nil nil)}}, :name om.next/get-computed, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x k-or-ks]), :arglists ([x] [x k-or-ks]), :arglists-meta (nil nil)}, :method-params ([x] [x k-or-ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 499, :end-line 499, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x k-or-ks]), :doc "Return the computed properties on a component or its props."}, get-state {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 529, :column 7, :end-line 529, :end-column 16, :arglists (quote ([component] [component k-or-ks])), :doc "Get a component's local state. May provide a single key or a sequential\n   collection of keys for indexed access into the component's local state.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([component] [component k-or-ks]), :arglists ([component] [component k-or-ks]), :arglists-meta (nil nil)}}, :name om.next/get-state, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([component] [component k-or-ks]), :arglists ([component] [component k-or-ks]), :arglists-meta (nil nil)}, :method-params ([component] [component k-or-ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 529, :end-line 529, :max-fixed-arity 2, :fn-var true, :arglists ([component] [component k-or-ks]), :doc "Get a component's local state. May provide a single key or a sequential\n   collection of keys for indexed access into the component's local state."}, *parent* {:name om.next/*parent*, :file ".cljs_rhino_repl/om/next.cljs", :line 28, :column 1, :end-line 28, :end-column 45, :dynamic true, :private true, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 28, :column 37, :end-line 28, :end-column 45, :dynamic true, :private true}}, update-state! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 543, :column 7, :end-line 543, :end-column 20, :arglists (quote ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3] [component f arg0 arg1 arg2 arg3 & arg-rest])), :doc "Update a component's local state. Similar to Clojure(Script)'s swap!", :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3]), :arglists ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3] [component f arg0 arg1 arg2 arg3 & arg-rest]), :arglists-meta (nil nil nil nil nil nil)}}, :name om.next/update-state!, :variadic true, :file ".cljs_rhino_repl/om/next.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3]), :arglists ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3] [component f arg0 arg1 arg2 arg3 & arg-rest]), :arglists-meta (nil nil nil nil nil nil)}, :method-params ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column 1, :line 543, :end-line 543, :max-fixed-arity 6, :fn-var true, :arglists ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3] [component f arg0 arg1 arg2 arg3 & arg-rest]), :doc "Update a component's local state. Similar to Clojure(Script)'s swap!"}, Indexer {:num-fields 2, :protocols #{cljs.core/IRecord om.next.protocols/IIndexer cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name om.next/Indexer, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :type true, :column 12, :internal-ctor true, :line 920, :record true, :end-line 920, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, update-query! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 673, :column 7, :end-line 673, :end-column 20, :arglists (quote ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3 & arg-rest])), :doc "Update a component's query and query parameters with a function.", :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2]), :arglists ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3 & arg-rest]), :arglists-meta (nil nil nil nil nil)}}, :name om.next/update-query!, :variadic true, :file ".cljs_rhino_repl/om/next.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2]), :arglists ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3 & arg-rest]), :arglists-meta (nil nil nil nil nil)}, :method-params ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 673, :end-line 673, :max-fixed-arity 6, :fn-var true, :arglists ([component f] [component f arg0] [component f arg0 arg1] [component f arg0 arg1 arg2] [component f arg0 arg1 arg2 arg3 & arg-rest]), :doc "Update a component's query and query parameters with a function."}, reduce-union-recursion-depth {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1230, :column 8, :end-line 1230, :end-column 36, :private true, :arglists (quote ([union-expr recursion-key])), :doc "Given a union expression decrement each of the query roots by one if it\n   is recursive."}, :private true, :name om.next/reduce-union-recursion-depth, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 36, :method-params ([union-expr recursion-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1230, :end-line 1230, :max-fixed-arity 2, :fn-var true, :arglists (quote ([union-expr recursion-key])), :doc "Given a union expression decrement each of the query roots by one if it\n   is recursive."}, query-zip {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 54, :column 8, :end-line 54, :end-column 17, :private true, :arglists (quote ([root])), :doc "Return a zipper on a query expression."}, :private true, :name om.next/query-zip, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([root])), :doc "Return a zipper on a query expression."}, reconciler {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1746, :column 7, :end-line 1746, :end-column 17, :arglists (quote ([{:keys [state shared shared-fn parser indexer ui->props normalize send merge-sends remotes merge merge-tree merge-ident prune-tree optimize history root-render root-unmount pathopt migrate id-key instrument], :or {root-render (fn* [p1__28822# p2__28823#] (js/ReactDOM.render p1__28822# p2__28823#)), prune-tree default-extract-errors, pathopt false, merge-sends (fn* [p1__28820# p2__28821#] (merge-with into p1__28820# p2__28821#)), merge-ident default-merge-ident, remotes [:remote], migrate default-migrate, history 100, merge default-merge, ui->props default-ui->props, indexer om.next/indexer, root-unmount (fn* [p1__28824#] (js/ReactDOM.unmountComponentAtNode p1__28824#)), merge-tree default-merge-tree, optimize (fn [cs] (sort-by depth cs))}, :as config}])), :doc "Construct a reconciler from a configuration map.\n\n   Required parameters:\n     :state        - the application state. If IAtom value is not supplied the\n                     data will be normalized into the default database format\n                     using the root query. This can be disabled by explicitly\n                     setting the optional :normalize parameter to false.\n     :parser       - the parser to be used\n\n   Optional parameters:\n     :shared       - a map of global shared properties for the component tree.\n     :shared-fn    - a function to compute global shared properties from the root props.\n                     the result is merged with :shared.\n     :send         - required only if the parser will return a non-empty value when\n                     run against the supplied :remotes. send is a function of two\n                     arguments, the map of remote expressions keyed by remote target\n                     and a callback which should be invoked with the result from each\n                     remote target. Note this means the callback can be invoked\n                     multiple times to support parallel fetching and incremental\n                     loading if desired. The callback should take the response as the\n                     first argument and the the query that was sent as the second\n                     argument.\n     :normalize    - whether the state should be normalized. If true it is assumed\n                     all novelty introduced into the system will also need\n                     normalization.\n     :remotes      - a vector of keywords representing remote services which can\n                     evaluate query expressions. Defaults to [:remote]\n     :root-render  - the root render function. Defaults to ReactDOM.render\n     :root-unmount - the root unmount function. Defaults to\n                     ReactDOM.unmountComponentAtNode\n     :logger       - supply a goog.log compatible logger"}, :name om.next/reconciler, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([p__28825]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1746, :end-line 1746, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [state shared shared-fn parser indexer ui->props normalize send merge-sends remotes merge merge-tree merge-ident prune-tree optimize history root-render root-unmount pathopt migrate id-key instrument], :or {root-render (fn* [p1__28822# p2__28823#] (js/ReactDOM.render p1__28822# p2__28823#)), prune-tree default-extract-errors, pathopt false, merge-sends (fn* [p1__28820# p2__28821#] (merge-with into p1__28820# p2__28821#)), merge-ident default-merge-ident, remotes [:remote], migrate default-migrate, history 100, merge default-merge, ui->props default-ui->props, indexer om.next/indexer, root-unmount (fn* [p1__28824#] (js/ReactDOM.unmountComponentAtNode p1__28824#)), merge-tree default-merge-tree, optimize (fn [cs] (sort-by depth cs))}, :as config}])), :doc "Construct a reconciler from a configuration map.\n\n   Required parameters:\n     :state        - the application state. If IAtom value is not supplied the\n                     data will be normalized into the default database format\n                     using the root query. This can be disabled by explicitly\n                     setting the optional :normalize parameter to false.\n     :parser       - the parser to be used\n\n   Optional parameters:\n     :shared       - a map of global shared properties for the component tree.\n     :shared-fn    - a function to compute global shared properties from the root props.\n                     the result is merged with :shared.\n     :send         - required only if the parser will return a non-empty value when\n                     run against the supplied :remotes. send is a function of two\n                     arguments, the map of remote expressions keyed by remote target\n                     and a callback which should be invoked with the result from each\n                     remote target. Note this means the callback can be invoked\n                     multiple times to support parallel fetching and incremental\n                     loading if desired. The callback should take the response as the\n                     first argument and the the query that was sent as the second\n                     argument.\n     :normalize    - whether the state should be normalized. If true it is assumed\n                     all novelty introduced into the system will also need\n                     normalization.\n     :remotes      - a vector of keywords representing remote services which can\n                     evaluate query expressions. Defaults to [:remote]\n     :root-render  - the root render function. Defaults to ReactDOM.render\n     :root-unmount - the root unmount function. Defaults to\n                     ReactDOM.unmountComponentAtNode\n     :logger       - supply a goog.log compatible logger"}, *instrument* {:name om.next/*instrument*, :file ".cljs_rhino_repl/om/next.cljs", :line 30, :column 1, :end-line 30, :end-column 49, :dynamic true, :private true, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 30, :column 37, :end-line 30, :end-column 49, :dynamic true, :private true}}, params {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 177, :column 4, :end-line 177, :end-column 10, :protocol om.next/IQueryParams, :doc "Return the query parameters", :arglists (quote ([this]))}, :protocol om.next/IQueryParams, :name om.next/params, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the query parameters"}, *shared* {:name om.next/*shared*, :file ".cljs_rhino_repl/om/next.cljs", :line 29, :column 1, :end-line 29, :end-column 45, :dynamic true, :private true, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 29, :column 37, :end-line 29, :end-column 45, :dynamic true, :private true}}, get-indexer {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1049, :column 7, :end-line 1049, :end-column 18, :arglists (quote ([reconciler])), :doc "PRIVATE: Get the indexer associated with the reconciler."}, :name om.next/get-indexer, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 18, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1049, :end-line 1049, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "PRIVATE: Get the indexer associated with the reconciler."}, get-props* {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 344, :column 8, :end-line 344, :end-column 18, :private true, :arglists (quote ([x k]))}, :private true, :name om.next/get-props*, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 18, :method-params ([x k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x k]))}, focus->path {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 145, :column 8, :end-line 145, :end-column 19, :private true, :arglists (quote ([focus] [focus bound] [focus bound path])), :doc "Given a focused query return the path represented by the query.\n\n   Examples:\n\n     (om.next/focus->path [{:foo [{:bar {:baz []}]}])\n     => [:foo :bar :baz]", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([focus] [focus bound] [focus bound path]), :arglists ([focus] [focus bound] [focus bound path]), :arglists-meta (nil nil nil)}}, :private true, :name om.next/focus->path, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([focus] [focus bound] [focus bound path]), :arglists ([focus] [focus bound] [focus bound path]), :arglists-meta (nil nil nil)}, :method-params ([focus] [focus bound] [focus bound path]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 3, :fn-var true, :arglists ([focus] [focus bound] [focus bound path]), :doc "Given a focused query return the path represented by the query.\n\n   Examples:\n\n     (om.next/focus->path [{:foo [{:bar {:baz []}]}])\n     => [:foo :bar :baz]"}, get-params {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 225, :column 7, :end-line 225, :end-column 17, :arglists (quote ([component])), :doc "Return the query params for a component."}, :name om.next/get-params, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Return the query params for a component."}, bind-query {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 204, :column 8, :end-line 204, :end-column 18, :private true, :arglists (quote ([query params]))}, :private true, :name om.next/bind-query, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 18, :method-params ([query params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 2, :fn-var true, :arglists (quote ([query params]))}, compute-react-key {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 285, :column 8, :end-line 285, :end-column 25, :private true, :arglists (quote ([cl props]))}, :private true, :name om.next/compute-react-key, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 25, :method-params ([cl props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 285, :end-line 285, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cl props]))}, set-prop! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 362, :column 8, :end-line 362, :end-column 17, :private true, :arglists (quote ([c k v])), :doc "PRIVATE: Do not use"}, :private true, :name om.next/set-prop!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([c k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 3, :fn-var true, :arglists (quote ([c k v])), :doc "PRIVATE: Do not use"}, *raf* {:name om.next/*raf*, :file ".cljs_rhino_repl/om/next.cljs", :line 26, :column 1, :end-line 26, :end-column 28, :dynamic true, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 26, :column 23, :end-line 26, :end-column 28, :dynamic true}}, IQueryParams {:meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 176, :column 14, :end-line 176, :end-column 26, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {params [[this]]}}}, :protocol-symbol true, :name om.next/IQueryParams, :file ".cljs_rhino_repl/om/next.cljs", :end-column 26, :column 1, :line 176, :protocol-info {:methods {params [[this]]}}, :info nil, :end-line 176, :impls #{default}, :doc nil, :jsdoc ("@interface")}, state {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 335, :column 8, :end-line 335, :end-column 13, :private true, :arglists (quote ([c]))}, :private true, :name om.next/state, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 13, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, has-error? {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1666, :column 17, :end-line 1666, :end-column 27, :tag boolean, :private true, :arglists (quote ([x]))}, :private true, :name om.next/has-error?, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1666, :ret-tag boolean, :end-line 1666, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, schedule-render! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 773, :column 7, :end-line 773, :end-column 23, :arglists (quote ([reconciler]))}, :name om.next/schedule-render!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 23, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 773, :end-line 773, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler]))}, react-set-state! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 578, :column 7, :end-line 578, :end-column 23, :arglists (quote ([component new-state] [component new-state cb])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([component new-state] [component new-state cb]), :arglists ([component new-state] [component new-state cb]), :arglists-meta (nil nil)}}, :name om.next/react-set-state!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([component new-state] [component new-state cb]), :arglists ([component new-state] [component new-state cb]), :arglists-meta (nil nil)}, :method-params ([component new-state] [component new-state cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 578, :end-line 578, :max-fixed-arity 3, :fn-var true, :arglists ([component new-state] [component new-state cb])}, class-path {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 729, :column 7, :end-line 729, :end-column 17, :arglists (quote ([c]))}, :name om.next/class-path, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 729, :end-line 729, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, transact! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 859, :column 7, :end-line 859, :end-column 16, :arglists (quote ([x tx] [r ref tx])), :doc "Given a reconciler or component run a transaction. tx is a parse expression\n   that should include mutations followed by any necessary read. The reads will\n   be used to trigger component re-rendering.\n\n   Example:\n\n     (om/transact! widget\n       '[(do/this!) (do/that!)\n         :read/this :read/that])", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x tx] [r ref tx]), :arglists ([x tx] [r ref tx]), :arglists-meta (nil nil)}}, :name om.next/transact!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x tx] [r ref tx]), :arglists ([x tx] [r ref tx]), :arglists-meta (nil nil)}, :method-params ([x tx] [r ref tx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 859, :end-line 859, :max-fixed-arity 3, :fn-var true, :arglists ([x tx] [r ref tx]), :doc "Given a reconciler or component run a transaction. tx is a parse expression\n   that should include mutations followed by any necessary read. The reads will\n   be used to trigger component re-rendering.\n\n   Example:\n\n     (om/transact! widget\n       '[(do/this!) (do/that!)\n         :read/this :read/that])"}, query->ast {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 908, :column 7, :end-line 908, :end-column 17, :arglists (quote ([query-expr])), :doc "Given a query expression convert it into an AST."}, :name om.next/query->ast, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :method-params ([query-expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 908, :end-line 908, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query-expr])), :doc "Given a query expression convert it into an AST."}, schedule-sends! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 785, :column 7, :end-line 785, :end-column 22, :arglists (quote ([reconciler]))}, :name om.next/schedule-sends!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 22, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 785, :end-line 785, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler]))}, default-extract-errors {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1669, :column 8, :end-line 1669, :end-column 30, :private true, :arglists (quote ([reconciler res query]))}, :private true, :name om.next/default-extract-errors, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 30, :method-params ([reconciler res query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1669, :end-line 1669, :max-fixed-arity 3, :fn-var true, :arglists (quote ([reconciler res query]))}, basis-t {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 770, :column 8, :end-line 770, :end-column 15, :private true, :arglists (quote ([reconciler]))}, :private true, :name om.next/basis-t, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 15, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 770, :end-line 770, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler]))}, roots {:name om.next/roots, :file ".cljs_rhino_repl/om/next.cljs", :line 25, :column 1, :end-line 25, :end-column 21, :private true, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 25, :column 16, :end-line 25, :end-column 21, :private true}}, *depth* {:name om.next/*depth*, :file ".cljs_rhino_repl/om/next.cljs", :line 31, :column 1, :end-line 31, :end-column 44, :dynamic true, :private true, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 31, :column 37, :end-line 31, :end-column 44, :dynamic true, :private true}}, add-root! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 791, :column 7, :end-line 791, :end-column 16, :arglists (quote ([reconciler root-class target] [reconciler root-class target options])), :doc "Given a root component class and a target root DOM node, instantiate and\n   render the root class using the reconciler's :state property. The reconciler\n   will continue to observe changes to :state and keep the target node in sync.\n   Note a reconciler may have only one root. If invoked on a reconciler with an\n   existing root, the new root will replace the old one.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([reconciler root-class target] [reconciler root-class target options]), :arglists ([reconciler root-class target] [reconciler root-class target options]), :arglists-meta (nil nil)}}, :name om.next/add-root!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([reconciler root-class target] [reconciler root-class target options]), :arglists ([reconciler root-class target] [reconciler root-class target options]), :arglists-meta (nil nil)}, :method-params ([reconciler root-class target] [reconciler root-class target options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 791, :end-line 791, :max-fixed-arity 4, :fn-var true, :arglists ([reconciler root-class target] [reconciler root-class target options]), :doc "Given a root component class and a target root DOM node, instantiate and\n   render the root class using the reconciler's :state property. The reconciler\n   will continue to observe changes to :state and keep the target node in sync.\n   Note a reconciler may have only one root. If invoked on a reconciler with an\n   existing root, the new root will replace the old one."}, reconciler? {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1836, :column 16, :end-line 1836, :end-column 27, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x is a reconciler."}, :name om.next/reconciler?, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1836, :ret-tag boolean, :end-line 1836, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a reconciler."}, get-query {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 246, :column 7, :end-line 246, :end-column 16, :arglists (quote ([x])), :doc "Return a IQuery/IParams instance bound query. Works for component classes\n   and component instances. See also om.next/full-query."}, :name om.next/get-query, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return a IQuery/IParams instance bound query. Works for component classes\n   and component instances. See also om.next/full-query."}, ref->components {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1055, :column 7, :end-line 1055, :end-column 22, :arglists (quote ([x ref])), :doc "Return all components for a given ref."}, :name om.next/ref->components, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 22, :method-params ([x ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1055, :end-line 1055, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x ref])), :doc "Return all components for a given ref."}, ->Reconciler {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1475, :column 12, :end-line 1475, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([config state]))}, :name om.next/->Reconciler, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 22, :method-params ([config state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 1475, :end-line 1475, :max-fixed-arity 2, :fn-var true, :arglists (quote ([config state]))}, merge-joins {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1370, :column 8, :end-line 1370, :end-column 19, :private true, :arglists (quote ([query])), :doc "Searches a query for duplicate joins and deep-merges them into a new query."}, :private true, :name om.next/merge-joins, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :method-params ([query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1370, :end-line 1370, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query])), :doc "Searches a query for duplicate joins and deep-merges them into a new query."}, Reconciler {:num-fields 2, :protocols #{cljs.core/IRecord om.next.protocols/IReconciler cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name om.next/Reconciler, :file ".cljs_rhino_repl/om/next.cljs", :end-column 22, :type true, :column 12, :internal-ctor true, :line 1475, :record true, :end-line 1475, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IDeref cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, OmProps {:private true, :num-fields 2, :protocols #{}, :name om.next/OmProps, :file ".cljs_rhino_repl/om/next.cljs", :end-column 27, :type true, :column 20, :line 272, :record false, :end-line 272, :skip-protocol-flag nil}, transact* {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 824, :column 7, :end-line 824, :end-column 16, :arglists (quote ([r c ref tx]))}, :name om.next/transact*, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 16, :method-params ([r c ref tx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 824, :end-line 824, :max-fixed-arity 4, :fn-var true, :arglists (quote ([r c ref tx]))}, dispatch {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 903, :column 7, :end-line 903, :end-column 15, :arglists (quote ([_ key _])), :doc "Helper function for implementing :read and :mutate as multimethods. Use this\n   as the dispatch-fn."}, :name om.next/dispatch, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 15, :method-params ([_ key _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 903, :end-line 903, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_ key _])), :doc "Helper function for implementing :read and :mutate as multimethods. Use this\n   as the dispatch-fn."}, app-state {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1841, :column 7, :end-line 1841, :end-column 16, :arglists (quote ([reconciler])), :doc "Return the reconciler's application state atom. Useful when the reconciler\n   was initialized via denormalized data."}, :name om.next/app-state, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 16, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1841, :end-line 1841, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "Return the reconciler's application state atom. Useful when the reconciler\n   was initialized via denormalized data."}, -get-state {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 188, :column 4, :end-line 188, :end-column 14, :protocol om.next/ILocalState, :doc "Get the component's local state", :arglists (quote ([this]))}, :protocol om.next/ILocalState, :name om.next/-get-state, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Get the component's local state"}, factory {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 292, :column 7, :end-line 292, :end-column 14, :arglists (quote ([class] [class {:keys [validator keyfn], :as opts}])), :doc "Create a factory constructor from a component class created with\n   om.next/defui.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([class] [class {:keys [validator keyfn], :as opts}]), :arglists ([class] [class {:keys [validator keyfn], :as opts}]), :arglists-meta (nil nil)}}, :name om.next/factory, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([class] [class {:keys [validator keyfn], :as opts}]), :arglists ([class] [class {:keys [validator keyfn], :as opts}]), :arglists-meta (nil nil)}, :method-params ([class] [class {:keys [validator keyfn], :as opts}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 292, :end-line 292, :max-fixed-arity 2, :fn-var true, :arglists ([class] [class {:keys [validator keyfn], :as opts}]), :doc "Create a factory constructor from a component class created with\n   om.next/defui."}, -get-rendered-state {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 189, :column 4, :end-line 189, :end-column 23, :protocol om.next/ILocalState, :doc "Get the component's rendered local state", :arglists (quote ([this]))}, :protocol om.next/ILocalState, :name om.next/-get-rendered-state, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 189, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Get the component's rendered local state"}, parser {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 896, :column 7, :end-line 896, :end-column 13, :arglists (quote ([{:keys [read mutate], :as opts}])), :doc "Create a parser. The argument is a map of two keys, :read and :mutate. Both\n   functions should have the signature (Env -> Key -> Params -> ParseResult)."}, :name om.next/parser, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 13, :method-params ([p__28407]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 896, :end-line 896, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [read mutate], :as opts}])), :doc "Create a parser. The argument is a map of two keys, :read and :mutate. Both\n   functions should have the signature (Env -> Key -> Params -> ParseResult)."}, merge-pending-state! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 568, :column 8, :end-line 568, :end-column 28, :private true, :arglists (quote ([c]))}, :private true, :name om.next/merge-pending-state!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 28, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 568, :end-line 568, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, merge-pending-props! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 400, :column 8, :end-line 400, :end-column 28, :private true, :arglists (quote ([c]))}, :private true, :name om.next/merge-pending-props!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 28, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, sift-idents {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1216, :column 8, :end-line 1216, :end-column 19, :private true, :arglists (quote ([res]))}, :private true, :name om.next/sift-idents, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :method-params ([res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1216, :end-line 1216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([res]))}, nil-or-map? {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 36, :column 16, :end-line 36, :end-column 27, :tag boolean, :arglists (quote ([x]))}, :name om.next/nil-or-map?, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :ret-tag boolean, :end-line 36, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, writer {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1885, :column 7, :end-line 1885, :end-column 13, :arglists (quote ([] [opts])), :doc "Create a Om Next transit writer. This writer can handler the tempid type.\n   Can pass transit writer customization opts map.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name om.next/writer, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1885, :end-line 1885, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts]), :doc "Create a Om Next transit writer. This writer can handler the tempid type.\n   Can pass transit writer customization opts map."}, *logger* {:name om.next/*logger*, :file ".cljs_rhino_repl/om/next.cljs", :line 17, :column 1, :end-line 17, :end-column 18, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 17, :column 10, :end-line 17, :end-column 18}}, merge-idents {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1421, :column 8, :end-line 1421, :end-column 20, :private true, :arglists (quote ([tree config refs query]))}, :private true, :name om.next/merge-idents, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 20, :method-params ([tree config refs query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1421, :end-line 1421, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tree config refs query]))}, indexer {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1035, :column 7, :end-line 1035, :end-column 14, :arglists (quote ([] [extfs])), :doc "Given a function (Component -> Ref), return an indexer.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [extfs]), :arglists ([] [extfs]), :arglists-meta (nil nil)}}, :name om.next/indexer, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [extfs]), :arglists ([] [extfs]), :arglists-meta (nil nil)}, :method-params ([] [extfs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1035, :end-line 1035, :max-fixed-arity 1, :fn-var true, :arglists ([] [extfs]), :doc "Given a function (Component -> Ref), return an indexer."}, subquery {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 745, :column 7, :end-line 745, :end-column 15, :arglists (quote ([x subquery-ref subquery-class])), :doc "Given a class or mounted component x and a ref to an instantiated component\n   or class that defines a subquery, pick the most specific subquery. If the\n   component is mounted subquery-ref will be used, subquery-class otherwise."}, :name om.next/subquery, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 15, :method-params ([x subquery-ref subquery-class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 745, :end-line 745, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x subquery-ref subquery-class])), :doc "Given a class or mounted component x and a ref to an instantiated component\n   or class that defines a subquery, pick the most specific subquery. If the\n   component is mounted subquery-ref will be used, subquery-class otherwise."}, reader {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1879, :column 7, :end-line 1879, :end-column 13, :arglists (quote ([] [opts])), :doc "Create a Om Next transit reader. This reader can handler the tempid type.\n   Can pass transit reader customization opts map.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name om.next/reader, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1879, :end-line 1879, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts]), :doc "Create a Om Next transit reader. This reader can handler the tempid type.\n   Can pass transit reader customization opts map."}, component? {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 328, :column 16, :end-line 328, :end-column 26, :tag boolean, :arglists (quote ([x])), :doc "Returns true if the argument is an Om component."}, :name om.next/component?, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :ret-tag boolean, :end-line 328, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if the argument is an Om component."}, remove-root! {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 806, :column 7, :end-line 806, :end-column 19, :arglists (quote ([reconciler target])), :doc "Remove a root target (a DOM element) from a reconciler. The reconciler will\n   no longer attempt to reconcile application state with the specified root."}, :name om.next/remove-root!, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :method-params ([reconciler target]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 806, :end-line 806, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reconciler target])), :doc "Remove a root target (a DOM element) from a reconciler. The reconciler will\n   no longer attempt to reconcile application state with the specified root."}, ident {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 174, :column 4, :end-line 174, :end-column 9, :protocol om.next/Ident, :doc "Return the ident for this component", :arglists (quote ([this props]))}, :protocol om.next/Ident, :name om.next/ident, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 9, :method-params ([this props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 174, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this props])), :doc "Return the ident for this component"}, react-ref {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 705, :column 7, :end-line 705, :end-column 16, :arglists (quote ([component name])), :doc "Returns the component associated with a component's React ref."}, :name om.next/react-ref, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 16, :method-params ([component name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 705, :end-line 705, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component name])), :doc "Returns the component associated with a component's React ref."}, tempid {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1869, :column 7, :end-line 1869, :end-column 13, :arglists (quote ([] [id])), :doc "Return a temporary id.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [id]), :arglists ([] [id]), :arglists-meta (nil nil)}}, :name om.next/tempid, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [id]), :arglists ([] [id]), :arglists-meta (nil nil)}, :method-params ([] [id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1869, :end-line 1869, :max-fixed-arity 1, :fn-var true, :arglists ([] [id]), :doc "Return a temporary id."}, get-reconciler {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 367, :column 8, :end-line 367, :end-column 22, :private true, :arglists (quote ([c]))}, :private true, :name om.next/get-reconciler, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 22, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 367, :end-line 367, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, map->Indexer {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 920, :column 12, :end-line 920, :end-column 19, :internal-ctor true, :factory :map, :arglists (quote ([G__28417]))}, :name om.next/map->Indexer, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 19, :method-params ([G__28417]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 920, :end-line 920, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28417]))}, transform-reads {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 595, :column 7, :end-line 595, :end-column 22, :arglists (quote ([r tx])), :doc "Given r (a reconciler) and a query expression including a mutation and\n   any simple reads, return the equivalent query expression where the simple\n   reads have been replaced by the full query for each component that cares about\n   the specified read."}, :name om.next/transform-reads, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 22, :method-params ([r tx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 595, :end-line 595, :max-fixed-arity 2, :fn-var true, :arglists (quote ([r tx])), :doc "Given r (a reconciler) and a query expression including a mutation and\n   any simple reads, return the equivalent query expression where the simple\n   reads have been replaced by the full query for each component that cares about\n   the specified read."}, shared {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 451, :column 7, :end-line 451, :end-column 13, :arglists (quote ([component] [component k-or-ks])), :doc "Return the global shared properties of the Om Next root. See :shared and\n   :shared-fn reconciler options.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([component] [component k-or-ks]), :arglists ([component] [component k-or-ks]), :arglists-meta (nil nil)}}, :name om.next/shared, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([component] [component k-or-ks]), :arglists ([component] [component k-or-ks]), :arglists-meta (nil nil)}, :method-params ([component] [component k-or-ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 451, :end-line 451, :max-fixed-arity 2, :fn-var true, :arglists ([component] [component k-or-ks]), :doc "Return the global shared properties of the Om Next root. See :shared and\n   :shared-fn reconciler options."}, depth {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 428, :column 8, :end-line 428, :end-column 13, :private true, :arglists (quote ([component])), :doc "PRIVATE: Returns the render depth (a integer) of the component relative to\n  the mount root."}, :private true, :name om.next/depth, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 13, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 428, :end-line 428, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "PRIVATE: Returns the render depth (a integer) of the component relative to\n  the mount root."}, ILocalState {:meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 186, :column 14, :end-line 186, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-set-state! [[this new-state]], -get-state [[this]], -get-rendered-state [[this]], -merge-pending-state! [[this]]}}}, :protocol-symbol true, :name om.next/ILocalState, :file ".cljs_rhino_repl/om/next.cljs", :end-column 25, :column 1, :line 186, :protocol-info {:methods {-set-state! [[this new-state]], -get-state [[this]], -get-rendered-state [[this]], -merge-pending-state! [[this]]}}, :info nil, :end-line 186, :impls #{}, :doc nil, :jsdoc ("@interface")}, full-query {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/.cljs_rhino_repl/om/next.cljs", :line 1083, :column 7, :end-line 1083, :end-column 17, :arglists (quote ([component] [component query])), :doc "Returns the absolute query for a given component, not relative like\n   om.next/get-query.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([component] [component query]), :arglists ([component] [component query]), :arglists-meta (nil nil)}}, :name om.next/full-query, :variadic false, :file ".cljs_rhino_repl/om/next.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([component] [component query]), :arglists ([component] [component query]), :arglists-meta (nil nil)}, :method-params ([component] [component query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1083, :end-line 1083, :max-fixed-arity 2, :fn-var true, :arglists ([component] [component query]), :doc "Returns the absolute query for a given component, not relative like\n   om.next/get-query."}}, :require-macros {om.next om.next}, :cljs.analyzer/constants {:seen #{indexes :query-root x :remote :tempids :normalized query :errors fn? :children :remove :pathopt vector? :id-key :tree :instrument :react-key subquery-ref :pre :read :key :not-mergeable :merge-ident :om.next/queries reads :else props :merge-sends :ref :config :queue :validator :index-component :sends-queued :remotes subquery-class :migrate * iquery? :mutator map? :reconciler c' :params :history string? :type :last-ident :keyfn :state :queued-sends :prop->classes keyword? :query-by-join _ validator :component config :ref->components :om.next/tables :merge :om.next/no-queries :queued refs :class->components sel or :error/invalid-expression :shared-fn m reconciler params :factory :render :parser :keys :ui->props nil? :next not :root :class state component :logger :indexer :root-unmount basis-t :drop-component :extfs reconciler? :dispatch-key :om-path :send :om.next/not-found :shared :merge-tree :optimize c :t tx :om.next/computed :indexes :elements-seen :target quote :root-render :query class :om.next/error :rewrite extfs opts :class-path->query :normalize component? root-class :mutate :none :om.next/skip :prune-tree :props :om/tag}, :order [_ :else :type :error/invalid-expression * :config :state :om.next/queries :query :params :component nil? c' c props basis-t :react-key :om-path :validator :keyfn fn? class validator :props :children :class :factory :ref component? component :om.next/computed :parser :key :target or reconciler? x not params query reads vector? :root :history :logger :remotes :pre keyword? subquery-ref string? subquery-class m reconciler root-class :shared :pathopt :reconciler :mutator tx iquery? :read :mutate map? opts :dispatch-key :prop->classes :class-path->query :index-component :class->components :ref->components :drop-component :om.next/not-found :indexes :extfs indexes extfs :indexer :om.next/no-queries :om/tag :om.next/tables refs :none :last-ident :query-root :elements-seen :query-by-join :not-mergeable :rewrite :merge-ident :normalize :merge-tree :keys :next :tempids :merge :migrate :id-key :queue :queued-sends :merge-sends :sends-queued :send :queued :render :om.next/skip :ui->props :optimize :t :normalized :shared-fn :instrument :root-render sel :remove :root-unmount config state :om.next/error :tree :errors :prune-tree :remote quote]}, :doc nil}