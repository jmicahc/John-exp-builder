;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name exp-builder.data, :imports nil, :requires {om om.next, om.next om.next}, :uses nil, :defs {simple-state1 {:name exp-builder.data/simple-state1, :file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :line 230, :column 1, :end-line 230, :end-column 19, :meta {:file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :line 230, :column 6, :end-line 230, :end-column 19}}, Layout-node {:num-fields 8, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name exp-builder.data/Layout-node, :file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 269, :record true, :end-line 269, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Layout-node {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :line 269, :column 12, :end-line 269, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([partition type coef width height children backgroundColor coefficient]))}, :name exp-builder.data/->Layout-node, :variadic false, :file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :end-column 23, :method-params ([partition type coef width height children backgroundColor coefficient]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 269, :end-line 269, :max-fixed-arity 8, :fn-var true, :arglists (quote ([partition type coef width height children backgroundColor coefficient]))}, map->Layout-node {:protocol-inline nil, :meta {:file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :line 269, :column 12, :end-line 269, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__28149]))}, :name exp-builder.data/map->Layout-node, :variadic false, :file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :end-column 23, :method-params ([G__28149]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 269, :end-line 269, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28149]))}, simple-state {:name exp-builder.data/simple-state, :file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :line 281, :column 1, :end-line 281, :end-column 18, :meta {:file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :line 281, :column 6, :end-line 281, :end-column 18}}, simplest-possible-state {:name exp-builder.data/simplest-possible-state, :file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :line 360, :column 1, :end-line 360, :end-column 29, :meta {:file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :line 360, :column 6, :end-line 360, :end-column 29}}, app-state {:name exp-builder.data/app-state, :file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :line 398, :column 1, :end-line 398, :end-column 15, :meta {:file "/home/john/clojure/John-exp-builder/src/exp_builder/data.cljs", :line 398, :column 6, :end-line 398, :end-column 15}}}, :require-macros {om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{:path backgroundColor :children :mutes height :key :coef :bottom :top :layout :selection-root :layout/node children :events :margin-left :or :margin-top :width :current-root :type coef :flexDirection :partition :column :c :const :event width :expr :var :root type :class :coefficient partition :then :b :and :right :display :d :uuid :selection :backgroundColor window-resize coefficient :test :mutate :classes :a :height :row :left}, :order [:current-root :root :partition :type :class :display :path :flexDirection :coef :children :column :layout :const :row :var :margin-left :coefficient :backgroundColor :height :width :classes :margin-top :selection partition type coef width height children backgroundColor coefficient :test :layout/node :top :left :bottom :uuid :events :mutes :or :mutate :expr window-resize :and :key :event :b :then :c :d :a :right :selection-root]}, :doc nil}